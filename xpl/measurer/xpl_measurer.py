"""
Created Date: Tuesday, May 4th 2021, 11:02:14 am
Author: Ali S. Razavian

Copyright (c) 2021 XPL Technologies AB
"""

import abc
import torch


class XPLMeasurer:

    def __init__(self,
                 name: str,
                 definition: dict):
        self.__name = name
        self.__type = definition['type']
        self.init_measurer(definition)

    def __str__(self
                ) -> str:
        return f'{self.__name}: {self.__type}'

    def get_type(self
                 ) -> str:
        return self.__type

    @abc.abstractmethod
    def init_measurer(self,
                      definition: dict
                      ) -> None:
        """
        This function sets up the measurer's internal behavior and everything it needs to calculate
        the measurement. That includes setting up the name of inputs, outputs, the type of measurement
        and etc.

        Args:
            measurement_params (dict): is a dictionary that has necessary fields
            to define an measurer
        """
        raise NotImplementedError

    @abc.abstractmethod
    def __call__(self,
                 batch: dict,
                 is_train: bool,
                 ) -> torch.Tensor:
        """
        This function receves batch as input, and based on the behavior defined in the measurement_params,
        calculates "PER SAMPLE" measurements.

        Args:
            batch (dict): The batch that was initially generated by the data loaders  and later on by 
            the graph. It contains all the neural net outputs and labels and everything else

        Returns:
            torch.Tensor: a tensor of measurements with the exact size of [batch_size] or [instance_size]
        """
        raise NotImplementedError
